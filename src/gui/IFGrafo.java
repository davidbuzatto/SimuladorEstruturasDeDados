/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package gui;

import estruturas.Grafo;
import estruturas.Lista;
import estruturas.algoritmos.grafos.AlgoritmosBasicosGrafo;
import estruturas.algoritmos.grafos.BuscaLargura;
import estruturas.algoritmos.grafos.BuscaProfundidade;
import estruturas.algoritmos.grafos.ComponentesConexos;
import gui.desenho.PainelDesenho;
import gui.desenho.estruturas.ArestaGrafoAnotado;
import gui.desenho.estruturas.GrafoAnotado;
import gui.desenho.estruturas.GrafoDesenhavel;
import gui.desenho.estruturas.VerticeGrafoAnotado;
import java.awt.Graphics2D;
import java.awt.Point;
import java.awt.RenderingHints;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;
import java.util.Map.Entry;
import javax.imageio.ImageIO;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.filechooser.FileFilter;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 * Janela para a simulação de grafos.
 * 
 * @author David Buzatto
 */
public class IFGrafo extends javax.swing.JInternalFrame {

    private GrafoDesenhavel grafoD;
    private GrafoAnotado grafoAnt;
    private Grafo grafo;
    private boolean movendo;
    private VerticeGrafoAnotado verticeMovimento;
    private VerticeGrafoAnotado verticeRemocao;
    private VerticeGrafoAnotado verticeArestaO;
    private VerticeGrafoAnotado verticeArestaD;
    private int tamanhoVertice = 40;
    private int deslocamentoX;
    private int deslocamentoY;
    
    private BuscaProfundidade dfs;
    private BuscaLargura bfs;
    
    private DefaultListModel modeloAdj;
    
    /**
     * Creates new form IFArvoreBinariaBusca
     */
    public IFGrafo() {
        
        grafoAnt = new GrafoAnotado();
        grafoD = new GrafoDesenhavel( grafoAnt );
        
        initComponents();
        
        modeloAdj = new DefaultListModel();
        listaAdj.setModel( modeloAdj );
        
        setVisible( true );
        
        grafoD.setPainel( painelDesenho );
        
        // grafo base
        grafoAnt.adicionarVertice( 100, 100, tamanhoVertice );
        grafoAnt.adicionarVertice( 150, 200, tamanhoVertice );
        grafoAnt.adicionarVertice( 250, 200, tamanhoVertice );
        grafoAnt.adicionarVertice( 200, 300, tamanhoVertice );
        grafoAnt.adicionarVertice( 300, 300, tamanhoVertice );
        grafoAnt.adicionarVertice( 100, 400, tamanhoVertice );
        grafoAnt.adicionarVertice( 350, 200, tamanhoVertice );
        grafoAnt.adicionarVertice( 450, 150, tamanhoVertice );
        grafoAnt.adicionarVertice( 550, 150, tamanhoVertice );
        grafoAnt.adicionarVertice( 450, 250, tamanhoVertice );
        grafoAnt.adicionarVertice( 550, 250, tamanhoVertice );
        grafoAnt.adicionarVertice( 450, 350, tamanhoVertice );
        grafoAnt.adicionarVertice( 550, 350, tamanhoVertice );
        
        grafoAnt.adicionarAresta( 0, 5 );
        grafoAnt.adicionarAresta( 4, 3 );
        grafoAnt.adicionarAresta( 0, 1 );
        grafoAnt.adicionarAresta( 9, 12 );
        grafoAnt.adicionarAresta( 6, 4 );
        grafoAnt.adicionarAresta( 5, 4 );
        grafoAnt.adicionarAresta( 0, 2 );
        grafoAnt.adicionarAresta( 11, 12 );
        grafoAnt.adicionarAresta( 9, 10 );
        grafoAnt.adicionarAresta( 0, 6 );
        grafoAnt.adicionarAresta( 7, 8 );
        grafoAnt.adicionarAresta( 9, 11 );
        grafoAnt.adicionarAresta( 5, 3 );
        
        atualizarDadosGrafo();
        painelDesenho.repaint();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings( "unchecked" )
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        menuPopUp = new javax.swing.JPopupMenu();
        itemMenuRemover = new javax.swing.JMenuItem();
        painelDesenho = new PainelDesenho( grafoD );
        painelOperacoes = new javax.swing.JPanel();
        tbtnInsVertices = new javax.swing.JToggleButton();
        tbtnInsArestas = new javax.swing.JToggleButton();
        btnRemoverArestas = new javax.swing.JButton();
        btnRemoverTudo = new javax.swing.JButton();
        btnAbrir = new javax.swing.JButton();
        btnSalvar = new javax.swing.JButton();
        btnSalvarImagem = new javax.swing.JButton();
        painelAlgoritmos = new javax.swing.JPanel();
        labelFonte = new javax.swing.JLabel();
        fieldFonte = new javax.swing.JTextField();
        btnDFS = new javax.swing.JButton();
        btnTabelaDFS = new javax.swing.JButton();
        btnBFS = new javax.swing.JButton();
        btnTabelaBFS = new javax.swing.JButton();
        labelCaminhoAte = new javax.swing.JLabel();
        fieldCaminhoAte = new javax.swing.JTextField();
        btnMostrarCaminho = new javax.swing.JButton();
        btnIdentificarCC = new javax.swing.JButton();
        btnLimparAlgoritmos = new javax.swing.JButton();
        painelDados = new javax.swing.JPanel();
        labelV = new javax.swing.JLabel();
        labelA = new javax.swing.JLabel();
        labelGM = new javax.swing.JLabel();
        labelGMX = new javax.swing.JLabel();
        fieldV = new javax.swing.JTextField();
        fieldA = new javax.swing.JTextField();
        fieldGM = new javax.swing.JTextField();
        fieldGMX = new javax.swing.JTextField();
        labelListaAdj = new javax.swing.JLabel();
        spAdj = new javax.swing.JScrollPane();
        listaAdj = new javax.swing.JList();

        itemMenuRemover.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gui/imagens/delete.png"))); // NOI18N
        itemMenuRemover.setText("remover");
        itemMenuRemover.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemMenuRemoverActionPerformed(evt);
            }
        });
        menuPopUp.add(itemMenuRemover);

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Grafo");
        setFrameIcon(new javax.swing.ImageIcon(getClass().getResource("/gui/imagens/grafoP.png"))); // NOI18N

        painelDesenho.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                painelDesenhoMouseDragged(evt);
            }
        });
        painelDesenho.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                painelDesenhoMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                painelDesenhoMouseReleased(evt);
            }
        });

        javax.swing.GroupLayout painelDesenhoLayout = new javax.swing.GroupLayout(painelDesenho);
        painelDesenho.setLayout(painelDesenhoLayout);
        painelDesenhoLayout.setHorizontalGroup(
            painelDesenhoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 617, Short.MAX_VALUE)
        );
        painelDesenhoLayout.setVerticalGroup(
            painelDesenhoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        painelOperacoes.setBorder(javax.swing.BorderFactory.createTitledBorder("Operações"));

        tbtnInsVertices.setText("Inserir Vértices");
        tbtnInsVertices.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tbtnInsVerticesActionPerformed(evt);
            }
        });

        tbtnInsArestas.setText("Inserir Arestas");
        tbtnInsArestas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tbtnInsArestasActionPerformed(evt);
            }
        });

        btnRemoverArestas.setText("Remover Arestas");
        btnRemoverArestas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoverArestasActionPerformed(evt);
            }
        });

        btnRemoverTudo.setText("Remover Tudo");
        btnRemoverTudo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoverTudoActionPerformed(evt);
            }
        });

        btnAbrir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gui/imagens/folder.png"))); // NOI18N
        btnAbrir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAbrirActionPerformed(evt);
            }
        });

        btnSalvar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gui/imagens/disk.png"))); // NOI18N
        btnSalvar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalvarActionPerformed(evt);
            }
        });

        btnSalvarImagem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gui/imagens/photo.png"))); // NOI18N
        btnSalvarImagem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalvarImagemActionPerformed(evt);
            }
        });

        painelAlgoritmos.setBorder(javax.swing.BorderFactory.createTitledBorder("Algoritmos"));

        labelFonte.setText("Fonte:");

        btnDFS.setText("DFS");
        btnDFS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDFSActionPerformed(evt);
            }
        });

        btnTabelaDFS.setText("Tabela DFS");
        btnTabelaDFS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTabelaDFSActionPerformed(evt);
            }
        });

        btnBFS.setText("BFS");
        btnBFS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBFSActionPerformed(evt);
            }
        });

        btnTabelaBFS.setText("Tabela BFS");
        btnTabelaBFS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTabelaBFSActionPerformed(evt);
            }
        });

        labelCaminhoAte.setText("Caminho Até:");

        btnMostrarCaminho.setText("Mostrar Caminho");
        btnMostrarCaminho.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMostrarCaminhoActionPerformed(evt);
            }
        });

        btnIdentificarCC.setText("Identificar Componentes Conexos");
        btnIdentificarCC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnIdentificarCCActionPerformed(evt);
            }
        });

        btnLimparAlgoritmos.setText("Limpar Execução dos Algoritmos");
        btnLimparAlgoritmos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimparAlgoritmosActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout painelAlgoritmosLayout = new javax.swing.GroupLayout(painelAlgoritmos);
        painelAlgoritmos.setLayout(painelAlgoritmosLayout);
        painelAlgoritmosLayout.setHorizontalGroup(
            painelAlgoritmosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painelAlgoritmosLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(painelAlgoritmosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, painelAlgoritmosLayout.createSequentialGroup()
                        .addComponent(labelCaminhoAte)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(fieldCaminhoAte, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, painelAlgoritmosLayout.createSequentialGroup()
                        .addComponent(labelFonte)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(fieldFonte, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, painelAlgoritmosLayout.createSequentialGroup()
                        .addComponent(btnDFS)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnTabelaDFS))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, painelAlgoritmosLayout.createSequentialGroup()
                        .addComponent(btnBFS)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnTabelaBFS))
                    .addComponent(btnMostrarCaminho, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btnLimparAlgoritmos, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btnIdentificarCC, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );
        painelAlgoritmosLayout.setVerticalGroup(
            painelAlgoritmosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painelAlgoritmosLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(painelAlgoritmosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelFonte)
                    .addComponent(fieldFonte, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(painelAlgoritmosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnTabelaDFS)
                    .addComponent(btnDFS))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(painelAlgoritmosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnTabelaBFS)
                    .addComponent(btnBFS))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(painelAlgoritmosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelCaminhoAte)
                    .addComponent(fieldCaminhoAte, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnMostrarCaminho)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnIdentificarCC)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnLimparAlgoritmos)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        painelDados.setBorder(javax.swing.BorderFactory.createTitledBorder("Dados da Estrutura"));

        labelV.setText("Vértices:");

        labelA.setText("Arestas:");

        labelGM.setText("Grau Médio:");

        labelGMX.setText("Grau Máx.:");

        fieldV.setEditable(false);

        fieldA.setEditable(false);

        fieldGM.setEditable(false);

        fieldGMX.setEditable(false);

        labelListaAdj.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelListaAdj.setText("Lista de Adjacências");

        spAdj.setViewportView(listaAdj);

        javax.swing.GroupLayout painelDadosLayout = new javax.swing.GroupLayout(painelDados);
        painelDados.setLayout(painelDadosLayout);
        painelDadosLayout.setHorizontalGroup(
            painelDadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painelDadosLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(painelDadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(painelDadosLayout.createSequentialGroup()
                        .addGroup(painelDadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(labelGM)
                            .addComponent(labelV))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(painelDadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(fieldGM, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 42, Short.MAX_VALUE)
                            .addComponent(fieldV, javax.swing.GroupLayout.Alignment.LEADING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(painelDadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(painelDadosLayout.createSequentialGroup()
                                .addComponent(labelA)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(fieldA))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, painelDadosLayout.createSequentialGroup()
                                .addComponent(labelGMX)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(fieldGMX))))
                    .addComponent(labelListaAdj, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(spAdj, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap())
        );
        painelDadosLayout.setVerticalGroup(
            painelDadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painelDadosLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(painelDadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelV)
                    .addComponent(fieldV, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelA)
                    .addComponent(fieldA, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(painelDadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelGM)
                    .addComponent(fieldGM, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelGMX)
                    .addComponent(fieldGMX, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(labelListaAdj)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(spAdj)
                .addContainerGap())
        );

        javax.swing.GroupLayout painelOperacoesLayout = new javax.swing.GroupLayout(painelOperacoes);
        painelOperacoes.setLayout(painelOperacoesLayout);
        painelOperacoesLayout.setHorizontalGroup(
            painelOperacoesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painelOperacoesLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(painelOperacoesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(painelDados, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(painelAlgoritmos, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, painelOperacoesLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(painelOperacoesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(painelOperacoesLayout.createSequentialGroup()
                                .addComponent(btnRemoverTudo)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnRemoverArestas)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnSalvarImagem, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(painelOperacoesLayout.createSequentialGroup()
                                .addComponent(tbtnInsVertices)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(tbtnInsArestas)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnAbrir, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnSalvar, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addGap(6, 6, 6))
        );
        painelOperacoesLayout.setVerticalGroup(
            painelOperacoesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painelOperacoesLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(painelOperacoesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btnSalvar)
                    .addGroup(painelOperacoesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(btnAbrir)
                        .addGroup(painelOperacoesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(tbtnInsArestas)
                            .addComponent(tbtnInsVertices))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(painelOperacoesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(painelOperacoesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnRemoverArestas)
                        .addComponent(btnRemoverTudo))
                    .addComponent(btnSalvarImagem))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(painelAlgoritmos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(painelDados, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(painelDesenho, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(painelOperacoes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(painelOperacoes, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(painelDesenho, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void itemMenuRemoverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemMenuRemoverActionPerformed

        grafoAnt.removerVertice( verticeRemocao.v );
        atualizarDadosGrafo();
        
        painelDesenho.repaint();
            
        JOptionPane.showMessageDialog( painelDesenho,
            String.format( "O vértice \"%d\" foi removido.",
                verticeRemocao.v ), "Removido", JOptionPane.INFORMATION_MESSAGE );
        
        verticeRemocao = null;
        
    }//GEN-LAST:event_itemMenuRemoverActionPerformed

    private void painelDesenhoMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_painelDesenhoMouseReleased
        movendo = false;
        verticeMovimento = null;
    }//GEN-LAST:event_painelDesenhoMouseReleased

    private void painelDesenhoMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_painelDesenhoMouseDragged
        
        if ( movendo ) {
            
            verticeMovimento.xCentro = evt.getX() - deslocamentoX;
            verticeMovimento.yCentro = evt.getY() - deslocamentoY;
            verticeMovimento.xIni = verticeMovimento.xCentro - verticeMovimento.tamanho / 2;
            verticeMovimento.yIni = verticeMovimento.yCentro - verticeMovimento.tamanho / 2;
            verticeMovimento.xFim = verticeMovimento.xIni + verticeMovimento.tamanho;
            verticeMovimento.yFim = verticeMovimento.yIni + verticeMovimento.tamanho;
            painelDesenho.repaint();
            
        }
        
    }//GEN-LAST:event_painelDesenhoMouseDragged

    private void painelDesenhoMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_painelDesenhoMousePressed
        
        if ( SwingUtilities.isLeftMouseButton( evt ) ) {

            if ( tbtnInsVertices.isSelected() ) {
                
                grafoAnt.adicionarVertice( evt.getX(), evt.getY(), tamanhoVertice );
                atualizarDadosGrafo();
        
            } else if ( tbtnInsArestas.isSelected() ) {
                
                for ( Entry<Integer, VerticeGrafoAnotado> v : grafoAnt.getVertices().entrySet() ) {
                    
                    Point p = evt.getPoint();

                    int cat1 = p.x - v.getValue().xCentro;
                    int cat2 = p.y - v.getValue().yCentro;

                    if ( cat1 * cat1 + cat2 * cat2 <= tamanhoVertice * tamanhoVertice / 2 ) {

                        if ( verticeArestaO == null ) {
                            verticeArestaO = v.getValue();
                            grafoD.setVerticeArestaOrigem( verticeArestaO );
                        } else {
                            
                            verticeArestaD = v.getValue();
                            grafoAnt.adicionarAresta( verticeArestaO.v, verticeArestaD.v );
                            grafoD.setVerticeArestaOrigem( null );

                            atualizarDadosGrafo();
                            
                            verticeArestaO = null;
                            verticeArestaD = null;
                            
                        }

                        break;

                    }

                }
                
                atualizarDadosGrafo();
        
            } else {
                
                for ( Entry<Integer, VerticeGrafoAnotado> v : grafoAnt.getVertices().entrySet() ) {
                    
                    Point p = evt.getPoint();
                
                    int cat1 = p.x - v.getValue().xCentro;
                    int cat2 = p.y - v.getValue().yCentro;

                    if ( cat1 * cat1 + cat2 * cat2 <= tamanhoVertice * tamanhoVertice / 2 ) {

                        movendo = true;
                        verticeMovimento = v.getValue();
                        
                        deslocamentoX = cat1;
                        deslocamentoY = cat2;
                        
                        break;
                        
                    }
                    
                }
                
            }
            
        } else if ( SwingUtilities.isRightMouseButton( evt ) ) {
            
            tbtnInsVertices.setSelected( false );
            tbtnInsArestas.setSelected( false );
            
            for ( Entry<Integer, VerticeGrafoAnotado> v : grafoAnt.getVertices().entrySet() ) {
                    
                Point p = evt.getPoint();

                int cat1 = p.x - v.getValue().xCentro;
                int cat2 = p.y - v.getValue().yCentro;

                if ( cat1 * cat1 + cat2 * cat2 <= tamanhoVertice * tamanhoVertice / 2 ) {

                    verticeRemocao = v.getValue();
                    itemMenuRemover.setText( String.format( "Remover vértice \"%d\"", verticeRemocao.v ) );
                    menuPopUp.show( painelDesenho, p.x, p.y );
                    
                    break;

                }

            }
            
        }
        
        painelDesenho.repaint();
        
    }//GEN-LAST:event_painelDesenhoMousePressed

    private void tbtnInsVerticesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tbtnInsVerticesActionPerformed
        tbtnInsArestas.setSelected( false );
    }//GEN-LAST:event_tbtnInsVerticesActionPerformed

    private void tbtnInsArestasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tbtnInsArestasActionPerformed
        tbtnInsVertices.setSelected( false );
    }//GEN-LAST:event_tbtnInsArestasActionPerformed

    private void btnRemoverArestasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoverArestasActionPerformed
        
        List<ArestaGrafoAnotado> arestas = new ArrayList<>();
        List<ArestaGrafoAnotado> arestasRemovidas = new ArrayList<>();
        for ( Entry<String, ArestaGrafoAnotado> a : grafoAnt.getArestas().entrySet() ) {
            arestas.add( a.getValue() );
        }
        
        Collections.sort( arestas, new Comparator<ArestaGrafoAnotado>() {
            @Override
            public int compare( ArestaGrafoAnotado o1, ArestaGrafoAnotado o2 ) {
                if ( o1.origem.v < o2.origem.v ) return -1;
                if ( o1.origem.v > o2.origem.v ) return +1;
                if ( o1.destino.v < o2.destino.v ) return -1;
                if ( o1.destino.v > o2.destino.v ) return +1;
                return 0;
            }
        });
        
        DialogRemoverArestaGrafo d = new DialogRemoverArestaGrafo( null, true, arestas, arestasRemovidas );
        d.setVisible( true );
        
        if ( arestas.size() != grafoAnt.getArestas().size() ) {
            for ( ArestaGrafoAnotado a : arestasRemovidas ) {
                grafoAnt.removerAresta( a.origem.v, a.destino.v );
            }
        }
        
        atualizarDadosGrafo();
        
        painelDesenho.repaint();
        
    }//GEN-LAST:event_btnRemoverArestasActionPerformed

    private void btnDFSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDFSActionPerformed
        
        try {
            
            int fonte = Integer.parseInt( fieldFonte.getText() );
            boolean achou = false;
            
            // buscando a fonte
            for ( Entry<Integer, VerticeGrafoAnotado> v : grafoAnt.getVertices().entrySet() ) {
                
                if ( v.getValue().v == fonte ) {
                    achou = true;
                    break;
                }
                
            }
            
            if ( achou ) {
                
                atualizarDadosGrafo();
                dfs = new BuscaProfundidade( grafo, fonte );
                grafoD.setCaminho( dfs );
                painelDesenho.repaint();
                
            } else {
                JOptionPane.showMessageDialog( this, "O vértice fonte não existe no grafo!", "ERRO", JOptionPane.ERROR_MESSAGE );
            }
            
        } catch ( NumberFormatException exc ) {
            JOptionPane.showMessageDialog( this, "Entre com um número para o vértice fonte!", "ERRO", JOptionPane.ERROR_MESSAGE );
        }
        
    }//GEN-LAST:event_btnDFSActionPerformed

    private void btnBFSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBFSActionPerformed
        
        try {
            
            int fonte = Integer.parseInt( fieldFonte.getText() );
            boolean achou = false;
            
            // buscando a fonte
            for ( Entry<Integer, VerticeGrafoAnotado> v : grafoAnt.getVertices().entrySet() ) {
                
                if ( v.getValue().v == fonte ) {
                    achou = true;
                    break;
                }
                
            }
            
            if ( achou ) {
                
                atualizarDadosGrafo();
                bfs = new BuscaLargura( grafo, fonte );
                grafoD.setCaminho( bfs );
                painelDesenho.repaint();
                
            } else {
                JOptionPane.showMessageDialog( this, "O vértice fonte não existe no grafo!", "ERRO", JOptionPane.ERROR_MESSAGE );
            }
            
        } catch ( NumberFormatException exc ) {
            JOptionPane.showMessageDialog( this, "Entre com um número para o vértice fonte!", "ERRO", JOptionPane.ERROR_MESSAGE );
        }
        
    }//GEN-LAST:event_btnBFSActionPerformed

    private void btnTabelaDFSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTabelaDFSActionPerformed
        
        if ( dfs != null ) {
            
            DialogTabelaDFS d = new DialogTabelaDFS( null, true, grafo, grafoAnt, dfs );
            d.setVisible( true );
            
        } else {
            JOptionPane.showMessageDialog( this, "Execute a \"Busca em Profundidade\" primeiro!", "ERRO", JOptionPane.ERROR_MESSAGE );
        }
        
    }//GEN-LAST:event_btnTabelaDFSActionPerformed

    private void btnTabelaBFSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTabelaBFSActionPerformed
        
        if ( bfs != null ) {
            
            DialogTabelaBFS d = new DialogTabelaBFS( null, true, grafo, grafoAnt, bfs );
            d.setVisible( true );
            
        } else {
            JOptionPane.showMessageDialog( this, "Execute a \"Busca em Largura\" primeiro!", "ERRO", JOptionPane.ERROR_MESSAGE );
        }
        
    }//GEN-LAST:event_btnTabelaBFSActionPerformed

    private void btnMostrarCaminhoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMostrarCaminhoActionPerformed
        
        try {
            
            int ate = Integer.parseInt( fieldCaminhoAte.getText() );
            Integer destino = grafoAnt.getTransicaoAnotadoParaGrafo().get( ate );

            if ( destino != null ) {

                if ( dfs != null || bfs != null ) {

                    grafoD.setCaminhoAte( destino );
                    painelDesenho.repaint();

                } else {
                    JOptionPane.showMessageDialog( this, "Antes de obter um caminho, execute um dos algoritmos de busca!", "ERRO", JOptionPane.ERROR_MESSAGE );
                }

            } else {
                JOptionPane.showMessageDialog( this, "O vértice de destino não existe no grafo!", "ERRO", JOptionPane.ERROR_MESSAGE );
            }
                        
        } catch ( NumberFormatException exc ) {
            JOptionPane.showMessageDialog( this, "Entre com um número para o vértice de destino!", "ERRO", JOptionPane.ERROR_MESSAGE );
        }
        
    }//GEN-LAST:event_btnMostrarCaminhoActionPerformed

    private void btnIdentificarCCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnIdentificarCCActionPerformed
        
        atualizarDadosGrafo();
        ComponentesConexos cc = new ComponentesConexos( grafo );
        grafoD.setCc( cc );
        painelDesenho.repaint();
        
    }//GEN-LAST:event_btnIdentificarCCActionPerformed

    private void btnLimparAlgoritmosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimparAlgoritmosActionPerformed
        atualizarDadosGrafo();
        fieldFonte.setText( "" );
        fieldCaminhoAte.setText( "" );
        painelDesenho.repaint();
    }//GEN-LAST:event_btnLimparAlgoritmosActionPerformed

    private void btnRemoverTudoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoverTudoActionPerformed
        grafoAnt.limpar();
        atualizarDadosGrafo();
        painelDesenho.repaint();
    }//GEN-LAST:event_btnRemoverTudoActionPerformed

    private void btnSalvarImagemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalvarImagemActionPerformed
        
        if ( grafoAnt.getGrafo().v() != 0 ) {
            
            int minX = 0;
            int maxX = 0;
            int minY = 0;
            int maxY = 0;
            boolean primeiro = true;
            VerticeGrafoAnotado v;
            
            for ( Entry<Integer, VerticeGrafoAnotado> e : grafoAnt.getVertices().entrySet() ) {
                
                v = e.getValue();
                
                if ( primeiro ) {
                    minX = v.xCentro;
                    maxX = v.xCentro;
                    minY = v.yCentro;
                    maxY = v.yCentro;
                    primeiro = false;
                } else {
                    
                    if ( minX > v.xCentro ) {
                        minX = v.xCentro;
                    }
                    
                    if ( maxX < v.xCentro ) {
                        maxX = v.xCentro;
                    }
                    
                    if ( minY > v.yCentro ) {
                        minY = v.yCentro;
                    }
                    
                    if ( maxY < v.yCentro ) {
                        maxY = v.yCentro;
                    }
                    
                }
                
            }
            
            BufferedImage img = new BufferedImage( painelDesenho.getWidth(), painelDesenho.getHeight(), BufferedImage.TYPE_INT_ARGB );
            Graphics2D g2d = img.createGraphics();
            g2d.setRenderingHint( RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON );
            grafoD.desenhar( g2d );
            
            try {
                
                JFileChooser jfc = new JFileChooser();
                FileNameExtensionFilter fnef = new FileNameExtensionFilter( "Portable Network Graphics (*.png)", "png" );
                
                for ( FileFilter f : jfc.getChoosableFileFilters() ) {
                    jfc.removeChoosableFileFilter( f );
                }
                
                jfc.setFileFilter( fnef );
                jfc.setDialogTitle( "Salvar Imagem do Grafo" );
                jfc.setMultiSelectionEnabled( false );
                
                if ( jfc.showSaveDialog( this ) == JFileChooser.APPROVE_OPTION ) {
                    
                    File f = jfc.getSelectedFile();
                    if ( f.getName().lastIndexOf( ".png" ) == -1 ) {
                        f = new File( f.getAbsolutePath() + ".png" );
                    }
                    
                    if ( !f.exists() || 
                        ( f.exists() && JOptionPane.showConfirmDialog( 
                          this, "O arquivo já existe. Deseja sobrescrevê-lo?", "Aviso", 
                          JOptionPane.OK_CANCEL_OPTION ) == JOptionPane.OK_OPTION ) ) {
                        
                        ImageIO.write( img.getSubimage( minX - 30, minY - 30, maxX - minX + 60, maxY - minY + 60 ), "png", f );
                        
                    }
                    
                }
                
            } catch ( IOException exc ) {
                exc.printStackTrace();
            }
            
        } else {
            JOptionPane.showMessageDialog( this, "Não existe um grafo para salvar a imagem!", "ERRO", JOptionPane.ERROR_MESSAGE );
        }
        
    }//GEN-LAST:event_btnSalvarImagemActionPerformed

    private void btnSalvarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalvarActionPerformed
        
        try {
            
            JFileChooser jfc = new JFileChooser();
            FileNameExtensionFilter fnef = new FileNameExtensionFilter( "Grafo (*.grafo)", "grafo" );

            for ( FileFilter f : jfc.getChoosableFileFilters() ) {
                jfc.removeChoosableFileFilter( f );
            }

            jfc.setFileFilter( fnef );
            jfc.setDialogTitle( "Salvar Grafo" );
            jfc.setMultiSelectionEnabled( false );

            if ( jfc.showSaveDialog( this ) == JFileChooser.APPROVE_OPTION ) {
                
                File f = jfc.getSelectedFile();
                if ( f.getName().lastIndexOf( ".grafo" ) == -1 ) {
                    f = new File( f.getAbsolutePath() + ".grafo" );
                }
                
                if ( !f.exists() || 
                        ( f.exists() && JOptionPane.showConfirmDialog( 
                          this, "O arquivo já existe. Deseja sobrescrevê-lo?", "Aviso", 
                          JOptionPane.OK_CANCEL_OPTION ) == JOptionPane.OK_OPTION ) ) {
                    
                    ObjectOutputStream oout = new ObjectOutputStream( new FileOutputStream( f ) );
                    oout.writeObject( grafoAnt );
                    oout.flush();
                    oout.close();
                    
                }
                
            }
            
        } catch ( IOException exc ) {
            exc.printStackTrace();
        }
        
    }//GEN-LAST:event_btnSalvarActionPerformed

    private void btnAbrirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAbrirActionPerformed
        
        try {
            
            JFileChooser jfc = new JFileChooser();
            FileNameExtensionFilter fnef = new FileNameExtensionFilter( "Grafo (*.grafo)", "grafo" );

            for ( FileFilter f : jfc.getChoosableFileFilters() ) {
                jfc.removeChoosableFileFilter( f );
            }

            jfc.setFileFilter( fnef );
            jfc.setDialogTitle( "ABrir Grafo" );
            jfc.setMultiSelectionEnabled( false );

            if ( jfc.showOpenDialog( this ) == JFileChooser.APPROVE_OPTION ) {
                
                File f = jfc.getSelectedFile();
                ObjectInputStream oin = new ObjectInputStream( new FileInputStream( f ) );
                grafoAnt = (GrafoAnotado) oin.readObject();
                oin.close();
                
                grafoD = new GrafoDesenhavel( grafoAnt );
                grafoD.setPainel( painelDesenho );
                ((PainelDesenho) painelDesenho).setEstruturaDesenhavel( grafoD );
                atualizarDadosGrafo();
                
                painelDesenho.repaint();
                
            }
            
        } catch ( ClassNotFoundException | IOException exc ) {
            exc.printStackTrace();
        }
        
    }//GEN-LAST:event_btnAbrirActionPerformed
        
    private void atualizarDadosGrafo() {
        
        grafo = grafoAnt.gerarGrafo();
        
        fieldV.setText( String.valueOf( grafo.v() ) );
        fieldA.setText( String.valueOf( grafo.e() ) );
        fieldGM.setText( String.valueOf(
                (double) Math.round( AlgoritmosBasicosGrafo.grauMedio( grafo ) * 1000 ) / 1000 ) );
        fieldGMX.setText( String.valueOf( AlgoritmosBasicosGrafo.grauMaximo( grafo ) ) );
        
        dfs = null;
        bfs = null;
        
        grafoD.setCaminho( null );
        grafoD.setCaminhoAte( -1 );
        grafoD.setCc( null );
                
        modeloAdj.clear();
        StringBuilder sb;
        Lista<Integer> adj;
        int cont;
        
        for ( int v = 0; v < grafo.v(); v++ ) {
            
            cont = 0;
            sb = new StringBuilder();
            
            sb.append( grafoAnt.getTransicaoGrafoParaAnotado().get( v ) ).append( " -> { " );
            adj = (Lista) grafo.adj( v );
            
            for ( int w : adj ) {
                if ( cont == adj.getTamanho() - 1 ) {
                    sb.append( grafoAnt.getTransicaoGrafoParaAnotado().get( w ) ).append( " " );
                } else {
                    sb.append( grafoAnt.getTransicaoGrafoParaAnotado().get( w ) ).append( ", " );
                }
                cont++;
            }
            
            sb.append( "}" );
            
            modeloAdj.addElement( sb.toString() );
            
        }
        
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAbrir;
    private javax.swing.JButton btnBFS;
    private javax.swing.JButton btnDFS;
    private javax.swing.JButton btnIdentificarCC;
    private javax.swing.JButton btnLimparAlgoritmos;
    private javax.swing.JButton btnMostrarCaminho;
    private javax.swing.JButton btnRemoverArestas;
    private javax.swing.JButton btnRemoverTudo;
    private javax.swing.JButton btnSalvar;
    private javax.swing.JButton btnSalvarImagem;
    private javax.swing.JButton btnTabelaBFS;
    private javax.swing.JButton btnTabelaDFS;
    private javax.swing.JTextField fieldA;
    private javax.swing.JTextField fieldCaminhoAte;
    private javax.swing.JTextField fieldFonte;
    private javax.swing.JTextField fieldGM;
    private javax.swing.JTextField fieldGMX;
    private javax.swing.JTextField fieldV;
    private javax.swing.JMenuItem itemMenuRemover;
    private javax.swing.JLabel labelA;
    private javax.swing.JLabel labelCaminhoAte;
    private javax.swing.JLabel labelFonte;
    private javax.swing.JLabel labelGM;
    private javax.swing.JLabel labelGMX;
    private javax.swing.JLabel labelListaAdj;
    private javax.swing.JLabel labelV;
    private javax.swing.JList listaAdj;
    private javax.swing.JPopupMenu menuPopUp;
    private javax.swing.JPanel painelAlgoritmos;
    private javax.swing.JPanel painelDados;
    private javax.swing.JPanel painelDesenho;
    private javax.swing.JPanel painelOperacoes;
    private javax.swing.JScrollPane spAdj;
    private javax.swing.JToggleButton tbtnInsArestas;
    private javax.swing.JToggleButton tbtnInsVertices;
    // End of variables declaration//GEN-END:variables
}